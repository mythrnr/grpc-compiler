// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/user.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	messages "github.com/mythrnr/grpc-compiler/examples/golang/messages"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("services/user.proto", fileDescriptor_43dec4b4b376a661) }

var fileDescriptor_43dec4b4b376a661 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x92, 0xcd, 0xad, 0x2c, 0xc9, 0x28, 0xca, 0x2b, 0xd2, 0x4b, 0x2f, 0x2a, 0x48, 0x8e, 0x4f, 0xad,
	0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x83, 0xa9, 0x94, 0x12, 0xce, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x47, 0xd1, 0x63, 0x94, 0xc0, 0xc5, 0x1d, 0x5a, 0x9c, 0x5a, 0x14, 0x0c, 0x51, 0x24, 0x14, 0xc8,
	0xc5, 0xec, 0x9e, 0x5a, 0x22, 0xa4, 0xac, 0x87, 0xd5, 0x28, 0x98, 0x01, 0x7a, 0x20, 0x2d, 0x52,
	0xc4, 0x28, 0x52, 0x62, 0x70, 0x8a, 0x8a, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b,
	0xce, 0xcf, 0xd5, 0x87, 0x6a, 0xd1, 0x07, 0x69, 0xd1, 0x4d, 0xce, 0xcf, 0x2d, 0xc8, 0xcc, 0x49,
	0x2d, 0xd2, 0x87, 0xea, 0x2d, 0xd6, 0x4f, 0xcf, 0xcf, 0x49, 0xcc, 0x4b, 0xd7, 0x87, 0xb9, 0xf9,
	0x14, 0x93, 0x8c, 0x2f, 0x44, 0x43, 0x8c, 0x7b, 0x51, 0x41, 0xb2, 0x2b, 0x44, 0x59, 0x0c, 0xd4,
	0xb5, 0xc5, 0x49, 0x6c, 0x60, 0x4f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xe5, 0xb5,
	0xa5, 0x0f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	Get(ctx context.Context, in *messages.User, opts ...grpc.CallOption) (*messages.User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Get(ctx context.Context, in *messages.User, opts ...grpc.CallOption) (*messages.User, error) {
	out := new(messages.User)
	err := c.cc.Invoke(ctx, "/mythrnr.grpc_example.services.UserService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	Get(context.Context, *messages.User) (*messages.User, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mythrnr.grpc_example.services.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*messages.User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mythrnr.grpc_example.services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/user.proto",
}
